import re
import bcrypt
import hashlib
import requests

def check_pwned_password(password):
    
    sha1_hash= hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    prefix = sha1_hash[:5] 
    suffix = sha1_hash[5:]

    url = f"https://api.pwnedpasswords.com/range/{prefix}"
    response = requests.get(url)

    
    if response.status_code == 200:
        
        hashes = response.text.splitlines()
        for hash_suffix in hashes:
            if hash_suffix.startswith(suffix):
                return True  # Password is blacklisted
    return False 

password= input("Please enter your password: ")
missing_conditions = []
lettersequence=re.findall(r"(.)\1{2,}", password)
if len(password) < 8:
    missing_conditions.append("Password must have at least 8 characters.") 
if not re.search("[A-Z]", password): 
    missing_conditions.append("Password must have at least 1 uppercase letter")
if not re.search("[a-z]", password): 
    missing_conditions.append("Password must have at least 1 lowercase letter")
if not re.search("[0-9]", password): 
    missing_conditions.append("Password must have at least 1 number")
if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", password): 
    missing_conditions.append("Password must have at least 1 special character")
if lettersequence:
    missing_conditions.append("Password contains a sequence of 3 letters or above")


def sequencecheck():
    increasing = "".join([str(i) for i in range(10)])  # '0123456789'
    decreasing = "".join([str(i) for i in range(9, -1, -1)])  # '9876543210'
    
    increasing_sequences = "|".join([increasing[i:i+3] for i in range(len(increasing)-2)])
    decreasing_sequences = "|".join([decreasing[i:i+3] for i in range(len(decreasing)-2)])  
    
    return increasing_sequences, decreasing_sequences

increasing_sequences, decreasing_sequences = sequencecheck()


matches_increasing = re.findall(rf"({increasing_sequences})", password)
matches_decreasing = re.findall(rf"({decreasing_sequences})", password)

if matches_increasing or matches_decreasing:
    missing_conditions.append("Password has a sequence, avoid using sequences")
if check_pwned_password(password):
    missing_conditions.append("This password has been exposed in a data breach, please choose another.")

if missing_conditions:
    for i in missing_conditions:
        print(i)
else: 
    print("password is strong :) ")

password_bytes= password.encode('utf-8')  
hashed_password= bcrypt.hashpw(password_bytes, bcrypt.gensalt())

with open('hashed_password.txt', 'wb') as f:
    f.write(hashed_password)

with open('hashed_password.txt', 'rb') as f:
    print("The hashed password is:", f.read())


